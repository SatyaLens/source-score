openapi: 3.0.0
info:
  title: Source Score Microservice
  description: UAn application to rate sources based on the validity of their claims
  version: 0.0.1

#security:
#  - BasicAuth: []
#  - BearerAuth: []
#  - APIKeyAuth: []
#  - OAuth2:
#      - read
#      - write
#      - admin
#  - OpenID:
#      - read
#      - write
#      - admin

paths:
  /ping:
    get:
      responses:
        200:
          description: pong response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pong'

  /api/v1/sources:
    post:
      tags:
        - user
      summary: creates a user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        201:
          description: user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /api/v1/users/{userId}:
    get:
      tags:
        - user
      summary: get user
      operationId: getUser
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: return user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: update user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    delete:
      tags:
        - user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            format: int64
      summary: delete a user
      operationId: deleteUser
      responses:
        204:
          description: delete user


components:
#  securitySchemes:
#    BasicAuth:
#      type: http
#      scheme: basic
#    BearerAuth:
#      type: http
#      scheme: bearer
#      bearerFormat: JWT
#    APIKeyAuth:
#      type: apiKey
#      in: header
#      name: Y-API-KEY
#    OAuth2:
#      type: oauth2
#      flows:
#        authorizationCode:
#          authorizationUrl: https://example.com/authorize
#          tokenUrl: http:/example.com/token
#          scopes:
#            write: write
#            read: read
#            admin: admin
#    OpenID:
#      type: openIdConnect
#      openIdConnectUrl: https://lopenIdConnect.com


  schemas:
    Pong:
      type: object
      required:
        - pong
      properties:
        pong:
          type: string
          example: pong

    CreateUser:
      type: object
      properties:
        name:
          type: string
        lastname:
          type: string
        email:
          type: string

    User:
      description: saved user
      allOf:
        - $ref: '#/components/schemas/CreateUser'
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
            createdAt:
              type: string
              format: 'date-time'
            updatedAt:
              type: string
              format: 'date-time'

